#include <list>
#include <string>
#include <iterator>
#include <iostream>


using namespace std;

class Editor {
public:
    Editor(){
        str.push_front('|');
        pos = str.begin();
    };
    // сдвинуть курсор влево
    void Left(){
        if(str.size() != 0 && pos != str.begin()){
            list<char>::iterator pos1 = pos;
            --pos1;
            char tmp = *pos;
            *pos = *pos1;
            *pos1 = tmp;
            --pos;
        }
    };
    // сдвинуть курсор вправо
    void Right(){
        list<char>::iterator pos1 = str.end();
        if(str.size() != 0){
            --pos1;
            if(pos != pos1){
                pos1 = pos;
                ++pos1;
                char tmp = *pos;
                *pos = *pos1;
                *pos1 = tmp;
                ++pos;
            }
        }
    };
    // вставить символ token
    void Insert(char token){
        pos = str.insert(pos,token);
        ++pos;
    };
    // вырезать не более tokens символов, начиная с текущей позиции курсора
    void Cut(size_t tokens = 1){
        if(str.size() == 0){
            return;
        }

        buf.clear();
        auto it = pos;
        ++it;
        for(size_t i = 0 ; it!=str.end() && i< tokens; ++i){
            buf.push_back(*it);
            it = str.erase(it);
        }

    };
    // cкопировать не более tokens символов, начиная с текущей позиции курсора
    void Copy(size_t tokens = 1){

        buf.clear();
        auto it = pos;
        ++it;
        for(size_t i = 0 ; it!=str.end() && i< tokens; ++i, ++it){
            buf.push_back(*it);
        }
    };
    // вставить содержимое буфера в текущую позицию курсора
    void Paste(){
            str.insert(pos, buf.begin(), buf.end());
    };
    // получить текущее содержимое текстового редактора
    string GetText() const{
        string text;
        text.reserve(str.size());
        for(auto it = str.begin(); it!= str.end(); ++it){
            if(*it != '|'){
                text.push_back(*it);
            }
        }
        return text;
    };
    private:
        list<char> str;
        list<char> buf;
        list<char>::iterator pos;
};
int main() {
    Editor editor;
    const string text = "hello, world"s;
    for (char c : text) {
        editor.Insert(c);
    }
    // Текущее состояние редактора: `hello, world|`
    for (size_t i = 0; i < text.size(); ++i) {
        editor.Left();
    }
    // Текущее состояние редактора: `|hello, world`
    editor.Cut(7);
    // Текущее состояние редактора: `|world`
    // в буфере обмена находится текст `hello, `
    for (size_t i = 0; i < 5; ++i) {
        editor.Right();
    }
    // Текущее состояние редактора: `world|`
    editor.Insert(',');
    editor.Insert(' ');
    // Текущее состояние редактора: `world, |`
    editor.Paste();
    // Текущее состояние редактора: `world, hello, |`
    editor.Left();
    editor.Left();
    //Текущее состояние редактора: `world, hello|, `
    editor.Cut(3);  // Будут вырезаны 2 символа
    // Текущее состояние редактора: `world, hello|`
    cout << editor.GetText();
    return 0;
}
