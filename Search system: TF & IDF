#include <algorithm>
#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <map>
#include <cmath>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    int id;
    double relevance;
};


class SearchServer {

private:

    struct Query {
        set<string> p_words;
        set<string> m_words;
    };

    //map<string, set<int>> word_to_documents_;
    map<string, map<int, double>> word_to_document_freqs_; //<word, map<doc_id, word_tf>>

    set<string> stop_words_;

    int document_count_ = 0; //counts number of documents in database

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    Query ParseQuery(const string& text) const {
        Query query_words;
        for (const string& word : SplitIntoWordsNoStop(text)) {
            if (word[0] == '-') {
                query_words.m_words.insert(word.substr(1));
            }
            query_words.p_words.insert(word);
        }
        return query_words;
    }

    vector<Document> FindAllDocuments(const Query& query_words) const {

        map<int, double> document_to_relevance; // map <id, relevance(idf*tf)>

        if (!query_words.p_words.empty()) { //query contains at least one plus word

            //перебираем плюс слова. увеличиваем релевантность
            for (const auto& q_word : query_words.p_words) {
                if (word_to_document_freqs_.count(q_word)) {//query word is in index
                    int word_in_docs = word_to_document_freqs_.at(q_word).size();
                    //double inv_freq = (double)document_count_ / word_in_docs;
                    double idf = log((double)document_count_ / word_in_docs);
                    for (const auto& [id, tf] : word_to_document_freqs_.at(q_word)) {
                        double relevance = tf * idf;
                        document_to_relevance[id] += relevance;
                    }
                }
            }

            //перебираем минус слова. исключаем документы
            for (const auto& m_word : query_words.m_words) {
                if (word_to_document_freqs_.count(m_word)) {
                    for (const auto& [id, tf] : word_to_document_freqs_.at(m_word)) {
                        document_to_relevance.erase(id);
                    }
                }
            }
        }

        // приводим map<int, double> к vector<Document>
        vector<Document> matched_documents;
        for (auto [id_, relevance_] : document_to_relevance) {
            matched_documents.push_back({ id_, relevance_ });
        }
        return matched_documents;
    }

public:
    void SetStopWords(const string& text) {
        for (const string& word : SplitIntoWords(text)) {
            stop_words_.insert(word);
        }
    }

    //update inverted index with words fron new document counting TF of these words
    void AddDocument(int document_id, const string& document) {
        const vector<string> words = SplitIntoWordsNoStop(document);
        int document_size = words.size();
        if (document_size > 0) {
            for (const string& word : words) {
                double tf = (double)1/document_size;
                //add word from document to inverted index
                word_to_document_freqs_[word][document_id] += tf; // add after every found word
            }

        }
 ++document_count_;
    }

    vector<Document> FindTopDocuments(const string& raw_query) const {
        const Query query_words = ParseQuery(raw_query);
        vector<Document> matched_documents = FindAllDocuments(query_words);

        sort(matched_documents.begin(), matched_documents.end(),
            [](const Document& lhs, const Document& rhs) {
                return lhs.relevance > rhs.relevance;
            });

        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        return matched_documents;
    }


};

SearchServer CreateSearchServer() {
    SearchServer search_server;
    search_server.SetStopWords(ReadLine());

    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ) {
        search_server.AddDocument(document_id, ReadLine());
        ++document_id; //looks like we need to increase id only if document contains at least one plus word. Not done yet.
    }

    return search_server;
}

int main() {
    const SearchServer search_server = CreateSearchServer();

    const string query = ReadLine();
    for (const auto& [document_id, relevance] : search_server.FindTopDocuments(query)) {
        cout << "{ document_id = "s << document_id << ", "
            << "relevance = "s << relevance << " }"s << endl;
    }
}
